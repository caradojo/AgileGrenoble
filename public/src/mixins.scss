//== Media queries breakpoints
//
// from https://github.com/twbs/bootstrap-sass/blob/master/assets/stylesheets/bootstrap/_variables.scss
//
//## Define the breakpoints at which your layout will change, adapting to different screen sizes.

// Extra small screen / phone
//** Deprecated `$screen-xs` as of v3.0.1
$screen-xs:                  480px !default;
//** Deprecated `$screen-xs-min` as of v3.2.0
$screen-xs-min:              $screen-xs !default;
//** Deprecated `$screen-phone` as of v3.0.1
$screen-phone:               $screen-xs-min !default;

// Small screen / tablet
//** Deprecated `$screen-sm` as of v3.0.1
$screen-sm:                  768px !default;
$screen-sm-min:              $screen-sm !default;
//** Deprecated `$screen-tablet` as of v3.0.1
$screen-tablet:              $screen-sm-min !default;

// Medium screen / desktop
//** Deprecated `$screen-md` as of v3.0.1
$screen-md:                  992px !default;
$screen-md-min:              $screen-md !default;
//** Deprecated `$screen-desktop` as of v3.0.1
$screen-desktop:             $screen-md-min !default;

// Large screen / wide desktop
//** Deprecated `$screen-lg` as of v3.0.1
$screen-lg:                  1200px !default;
$screen-lg-min:              $screen-lg !default;
//** Deprecated `$screen-lg-desktop` as of v3.0.1
$screen-lg-desktop:          $screen-lg-min !default;

// So media queries don't overlap when required, provide a maximum
$screen-xs-max:              ($screen-sm-min - 1) !default;
$screen-sm-max:              ($screen-md-min - 1) !default;
$screen-md-max:              ($screen-lg-min - 1) !default;

// Useful breakpoint mixins
// from https://gist.github.com/asha23/e835dbd6fe81d1fa798b

// Media queries (max-width);
// @include respond-to('phone');

$breakpoints-max: (
  'xs' : ( max-width:  $screen-xs-max ),
  'sm' : ( max-width:  $screen-sm-max ),
  'md' : ( max-width:  $screen-md-max )
);

@mixin respond-to($name-max) {
  // If the key exists in the map
  @if map-has-key($breakpoints-max, $name-max) {
  // Prints a media query based on the value
    @media #{inspect(map-get($breakpoints-max, $name-max))} {
      @content;
    }
  }

  // If the key doesn't exist in the map
  @else {
    @warn "Unfortunately, no value could be retrieved from `#{$breakpoints-max}`. "
    + "Please make sure it is defined in `$breakpoints` map.";
  }
}

// Media queries (min-width);
// @include respond-from('phone');

$breakpoints-min: (
  'xs' : ( min-width:  $screen-xs-min ),
  'sm' : ( min-width:  $screen-sm-min ),
  'md' : ( min-width:  $screen-md-min ),
  'lg' : ( min-width:  $screen-lg-min )
);

@mixin respond-from($name-min) {
  // If the key exists in the map
  @if map-has-key($breakpoints-min, $name-min) {
  // Prints a media query based on the value
    @media #{inspect(map-get($breakpoints-min, $name-min))} {
      @content;
    }
  }

  // If the key doesn't exist in the map
  @else {
    @warn "Unfortunately, no value could be retrieved from `#{$breakpoints-min}`. "
    + "Please make sure it is defined in `$breakpoints` map.";
  }
}

// Media queries (max-device-width);
// @include respond-device-to('phone');

$breakpoints-max-device: (
  'xs' : ( max-device-width:  $screen-xs-max ),
  'sm' : ( max-device-width:  $screen-sm-max ),
  'md' : ( max-device-width:  $screen-md-max )
);

@mixin respond-device-to($name-max-device) {
  // If the key exists in the map
  @if map-has-key($breakpoints-max-device, $name-max-device) {
  // Prints a media query based on the value
    @media #{inspect(map-get($breakpoints-max-device, $name-max-device))} {
      @content;
    }
  }

  // If the key doesn't exist in the map
  @else {
    @warn "Unfortunately, no value could be retrieved from `#{$breakpoints-max-device}`. "
    + "Please make sure it is defined in `$breakpoints` map.";
  }
}

